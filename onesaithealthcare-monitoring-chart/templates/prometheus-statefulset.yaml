apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: oh-prometheus
  labels:
    prometheus: oh-prometheus
spec:
  replicas: {{ .Values.prometheus.replicas }}
  selector:
    matchLabels:
      prometheus: oh-prometheus
  template:
    metadata:
      labels:
        prometheus: oh-prometheus
    spec:
      restartPolicy: Always
      serviceAccountName: oh-prometheus
      schedulerName: default-scheduler
      enableServiceLinks: true
      terminationGracePeriodSeconds: 300
      securityContext:
        runAsUser: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        fsGroup: 65534
      containers:
        - resources:
            limits:
              cpu: 100m
              memory: 50Mi
            requests:
              cpu: 50m
              memory: 50Mi
          readinessProbe:
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          name: oh-prometheus-config-reloader
          livenessProbe:
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 2
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
          imagePullPolicy: IfNotPresent
          startupProbe:
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: config-volume
              readOnly: true
              mountPath: /etc/config
          terminationMessagePolicy: File
          image: quay.io/prometheus-operator/prometheus-config-reloader:{{ .Values.prometheus.config_reloader_version }}
          args:
            - --watched-dir=/etc/config
            - --listen-address=0.0.0.0:8080
            - --reload-url=http://127.0.0.1:9090/-/reload
        - resources:
            limits:
              cpu: 100m
              memory: 1Gi
            requests:
              cpu: 50m
              memory: 210Mi
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 4
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log         
          name: oh-prometheus-server
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 15
            successThreshold: 1
            failureThreshold: 3
          ports:
            - containerPort: 9090
              protocol: TCP
              name: web
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
          terminationMessagePolicy: File
          image: quay.io/prometheus/prometheus:{{ .Values.prometheus.prometheus_version }}
          args:
            - --storage.tsdb.retention.time=7d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
{{- if .Values.prometheus.persistence.enabled }}            
        - resources:
            limits:
              cpu: 60m
              memory: 256Mi
            requests:
              cpu: 25m
              memory: 128Mi
          image: quay.io/oauth2-proxy/oauth2-proxy:{{ .Values.prometheus.ohsso.oauth2_proxy_version }}
          ports:
            - name: proxy
              containerPort: 9091
              protocol: TCP
          imagePullPolicy: IfNotPresent
          name: oauth2-proxy
          args:
        args:
        - --provider=oidc
        - --oidc-issuer-url={{ .Values.prometheus.ohsso.url }}
        - --client-id={{ .Values.prometheus.ohsso.client_id }}
        - --client-secret={{ .Values.prometheus.ohsso.client_secret }}
        - --redirect-url=https://{{ .Values.prometheus.host }}/oauth2/callback
        - --cookie-secret=<random-cookie-secret>
        - --cookie-secure=true
        - --cookie-samesite=lax
        - --upstream=http://localhost:9090
        - --http-address=0.0.0.0:4180
        - --email-domain=*          
{{- end }}        
      serviceAccount: oh-prometheus          
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                  - key: prometheus
                    operator: In
                    values:
                      - oh-prometheus
      volumes:
        - name: config-volume
          configMap:
            name: oh-prometheus-config
            defaultMode: 420
{{- if not .Values.prometheus.persistence.enabled }}
        - name: storage-volume
          emptyDir:
            sizeLimit: 2Gi
{{- end }}
      dnsPolicy: ClusterFirst
{{- if .Values.prometheus.persistence.enabled }}
  volumeClaimTemplates:
    - kind: PersistentVolumeClaim
      apiVersion: v1
      metadata:
        name: storage-volume
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "{{ .Values.prometheus.persistence.size }}"
        storageClassName: "{{ .Values.prometheus.persistence.storageclass }}"
        volumeMode: Filesystem
{{- end }}
  serviceName: prometheus-server
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10
